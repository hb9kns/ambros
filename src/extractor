#!/bin/sh
# extractor <prefix> <reportfile> <source1> <source2> ...
# must be run in directory of sources
# will process each source according to its configuration file
# and save new clean text (if available) in same directory
# with <prefix> as start of name and <reportfile> for reporting
# time of earliest next polling (for job planning) and other information

# read global settings
. $SCRIPTDIR/constants.sh
tmpf1=$TMPDIR/extractor1$$.tmp
tmpf2=$TMPDIR/extractor2$$.tmp

minpoll=${MAXPOLLING:-999999}
starttime=`nowsec`

# only one character for prefix
prefix=`echo $1 | sed -e 's/\(.\).*/\1/'`
reportfile=$2
shift 2
suffix=${SOURCEFILESUFFIX:-.txt}

logf=`logfile extractor-$prefix`
logit $logf extractor working at $starttime:

for source in $*
do
 cd $source
# ignore directories without readable configuration file
 if test -r $SOURCECONFIG
 then
# read status values or set default ones
  if test -r $SOURCESTATUS
  then
   index=`configread $SOURCESTATUS INDEX`
   lasthash=`configread $SOURCESTATUS LASTHASH`
   lastpoll=`configread $SOURCESTATUS LASTPOLL`
  fi
# for index, use source configuration or global start value
  minindex=`configread $SOURCECONFIG MININDEX`
  minindex=${minindex:-$MININDEX}
  maxindex=`configread $SOURCECONFIG MAXINDEX`
  maxindex=${maxindex:-$MAXINDEX}
  index=${index:-$minindex}
  lasthash=${lasthash:-nil}
  lastpoll=${lastpoll:-0}
  now=`nowsec`
# get polling interval, set to maximum if unset
  polling=`configread $SOURCECONFIG POLLING` || polling=$MAXPOLLING
#echo : lastpoll $lastpoll : pollinterval $polling : now $now
# calculate time of next polling
  polling=`expr $lastpoll + $polling - $now`
# poll if passed
  if test $polling -le 0
  then
   logit $logf $source needs polling
# source descriptor (url, file, etc)
   desc=`configread $SOURCECONFIG SOURCE` || desc=file:///dev/null
   prio=`configread $SOURCECONFIG PRIORITY` || prio=$DEFAULTPRIORITY
   recipe=`configread $SOURCECONFIG RECIPE`
   if test ! -x "$recipe"
   then
    logit $logf $source ignoring non-executable recipe $recipe
    recipe=/bin/cat
   fi
   if $SCRIPTDIR/fetcher "$desc" > $tmpf1
   then
    $recipe <$tmpf1 >$tmpf2
    newhash=`hashfunction $tmpf2`
    if test $lasthash != $newhash
    then
     duration=`sed -e '1,/^---/d' $tmpf2 | $SCRIPTDIR/morse/sniptime $SPEED`
     stname="$prefix$prio$index$suffix"
# PBL
     cat <<EOH >$stname
IDENTIFICATION	$desc
PRIORITY	$prio
INDEX	$index
DECAY	$decay
SPEED	$SPEED
DURATION	$duration
EOH
     cat $tmpf2 >>$stname
     index=`expr $index + 1`
     if test $index -gt $maxindex
     then index=$minindex
     fi
     logit $logf $source fetched with new hash $newhash
     lasthash=$newhash
     lastpoll=$now
    else
     logit $logf $source has same hash $newhash
    fi
   else
    logit $logf $source fetching or filtering failed
   fi
# re-read polling interval
   polling=`configread $SOURCECONFIG POLLING` || polling=$MAXPOLLING
  fi
# calculate future minimal polling time
  if test $minpoll -gt $polling
  then minpoll=$polling
  fi
# save current status
  cat <<EOT >$SOURCESTATUS
INDEX		$index
LASTHASH	$lasthash
LASTPOLL	$lastpoll
EOT
 else logit $logf $source no configfile found, ignoring
 fi
# go back to channel directory
 cd ..
done

# save closest next polling time for controller
echo NEXTPOLL `expr $starttime + $minpoll` > $reportfile

rm -f $tmpf1 $tmpf2
