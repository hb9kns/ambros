#!/bin/sh
# ambros:
# control script for one channel

if test "$1" = ""
then cat <<EOT
usage: $0 <configfile>

start AMBROS control instance configured by <configfile>
EOT
exit 1
fi

# save directories of scripts and instance ("root", configuration file)
# is somewhat complicated to correctly handle relative paths
# (not using $OLDPWD etc to keep better portability)
owd=`pwd`
cd `dirname $0`
SCRIPTDIR=`pwd`
echo SCRIPTDIR: $SCRIPTDIR >&2
export SCRIPTDIR
cd "$owd"
cd `dirname $1`
ROOTDIR=`pwd`
echo ROOTDIR: $ROOTDIR >&2
AMBROSCONFIG=`basename $1`

cd $SCRIPTDIR || { echo "cannot access scripts in $SCRIPTDIR" ; exit 3 ; }
# read global settings
. ./constants.sh
logf=`logfile ambros`
# (re)generate morse code table
cd morse && ./chargen.sh

# temporary file
tmpf=$TMPDIR/ambros$$.tmp
# database for running daemons
daemons=$TMPDIR/daemons$$.tmp
# function for starting and logging daemons
# $logf and $daemon are global variables
# arg1=action, arg2=channel, arg3=type, arg4=pid
# (arg4 only if action other than start)
dodaemon () {
 if test "$1" = "start"
 then
  $SCRIPTDIR/$3 $2 &
  dpid=$!
  logit $logf daemon:$2 "starting $3 with PID $dpid"
 else
  dpid=$4
 fi
 echo $2 $3 $dpid >>$daemons
}

# create temporary directory, ignore error if already existing
mkdir $TMPDIR 2>/dev/null
if test ! -d $TMPDIR
then
 logit $logf init "cannot create temporary directory $TMPDIR - aborting!"
 exit 3
fi
logit $logf init tempdir $TMPDIR

if test ! -d "$ROOTDIR" -o ! -x "$ROOTDIR" -o ! -r "$ROOTDIR" -o ! -w "$ROOTDIR"
then
 logit $logf init "base directory ($ROOTDIR) is not usable - aborting!"
 exit 2
fi

# get channel list
cd "$ROOTDIR"
logit $logf init working in base directory $ROOTDIR
lchannels=`configread $AMBROSCONFIG CHANNELS '.,:;/'`
logit $logf channels list: $lchannels

# collect channel directory names
unset channels
for ch in $lchannels
do
if test -d $ch -a -x $ch -a -r $ch -a -w $ch
then
 if test -r $ch/$CHANNELCONFIG
 then channels="$ch $channels"
 else
  logit $logf channels "configuration file $ch/$CHANNELCONFIG is not readable, ignoring!"
 fi
else
 logit $logf channels "$ch is not read/write/accessible directory, ignoring!"
fi
done

SPEED=`configread $AMBROSCONFIG WPM`
SPEED=${SPEED:-$GLOBALSPEED}
if test "$SPEED" != ""
then
 logit $logf init "Morse speed $SPEED Words/min"
 export SPEED
else logit $logf init "WARNING: Morse speed undefined!"
fi

cd "$ROOTDIR"
if test ! -d "$SOURCEDIR" -o ! -x "$SOURCEDIR" -o ! -r "$SOURCEDIR" -o ! -w "$SOURCEDIR"
then
 logit $logf init "source directory $ROOTDIR/$SOURCEDIR unusable - aborting!"
 exit 2
fi

# handler for aborting
finish () {
 logit $logf finish received abort signal
 AMBROSABORT=1
}
AMBROSABORT=0
 
trap finish INT TERM STOP

# for each channel, start a transmitter and editor daemon
# and log their PID
for ch in $channels
do
 cd $ch
 dodaemon start $ch sender
 dodaemon start $ch schneider
 cd "$ROOTDIR"
done

logit $logf init "entering main control loop, PID $$"

# for communication with extractor
extractorfile=$TMPDIR/$EXTRACTORFILE

while test $AMBROSABORT -eq 0
do # main loop
logit $logf mainloop passing

# collect source names
for ch in $channels
do
csources=`configread "$ch/$CHANNELCONFIG" SOURCES '.,:;/'`
lsources="$csources $lsources"
done
cd $ROOTDIR/$SOURCEDIR
{
 for ls in $lsources
 do echo $ls
 done
} | sort -r | uniq | {
 while read sc
 do
 if test -d "$sc" -a -x "$sc" -a -r "$sc" -a -w "$sc"
 then echo $sc
 fi
 done
} > $tmpf
sources=`cat $tmpf`
logit $logf mainloop "valid sources: $sources"

# fetch and process sources ('_' for channel prefix, i.e 'all' for sources)
$SCRIPTDIR/extractor _ $extractorfile $sources

#echo
#echo enter q to abort:
#read ans
#if test "$ans" = "q"
#then AMBROSABORT=99
#fi

# watchdog for daemons
cat $daemons >$tmpf
date "+# watchdog %c" >$daemons
cat $tmpf | { while read ch type pid
do
# ignore comments
 if test "$ch" != "#"
 then
  if ps|grep "^ *$pid .*$type" >/dev/null 2>&1
  then action=log
  else action=start
   logit $logf daemon "$type for $ch died"
  fi
   dodaemon $action $ch $type $pid
 fi
done
}

# wait for extractor-defined next poll time, in steps of 10sec
delta=`date +%s`
nextpoll=`configread $extractorfile NEXTPOLL` || nextpoll=$delta
nextpoll=`expr $nextpoll - 10`
delta=`expr $nextpoll - $delta`
logit $logf wait about $delta sec until next polling
while test `date +%s` -lt $nextpoll
do
 sleep 10
 if test $AMBROSABORT -ne 0
 then nextpoll=0
 fi
done

done # main loop

cat $daemons | { while read ch type pid
do
# ignore comments
 if test "$ch" != "#"
 then
  logit $logf daemon killing PID $pid
  kill -$DAEMONTERMINATE $pid
 fi
done
}

# remove all temporary stuff
#rm -rf $TMPDIR

logit $logf ambros finished.
