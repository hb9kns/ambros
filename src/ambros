#!/bin/sh
# ambros:
# control script for one channel

if test "$1" = ""
then cat <<EOT
usage: $0 <configfile>

start AMBROS control instance configured by <configfile>
EOT
exit 1
fi

# save directories of scripts and instance ("root", configuration file)
# is somewhat complicated to correctly handle relative paths
# (not using $OLDPWD etc to keep better portability)
owd=`pwd`
cd `dirname $0`
SCRIPTDIR=`pwd`
echo SCRIPTDIR: $SCRIPTDIR
cd "$owd"
cd `dirname $1`
ROOTDIR=`pwd`
echo ROOTDIR: $ROOTDIR
AMBROSCONFIG=`basename $1`

cd $SCRIPTDIR || { echo "cannot access scripts in $SCRIPTDIR" ; exit 3 ; }
# read global settings
. ./constants.sh
# (re)generate morse code table
cd morse && ./chargen.sh

if test ! -d "$ROOTDIR" -o ! -x "$ROOTDIR" -o ! -r "$ROOTDIR" -o ! -w "$ROOTDIR"
then echo "$ROOTDIR is not read/write/executable directory, aborting!"
exit 2
fi

# get channel list
cd "$ROOTDIR"
echo working in channel $ROOTDIR
channels=`configread $AMBROSCONFIG channels ,`
echo channels: $channels
GLOBALSPEED=`configread $AMBROSCONFIG WPM`
GLOBALSPEED=${GLOBALSPEED:-12}
echo global speed $GLOBALSPEED Words/min

# handler for aborting
finish () {
 echo "received abort signal, stopping all subprocesses"
# if no PID is set, use 1 (init) as a dummy argument
 /bin/kill -TERM ${pidassembler:-1} $pidchannelchief
 echo ending main control loop
 date +"at %c"
 AMBROSABORT=1
}
AMBROSABORT=0
 
trap finish INT TERM STOP

echo entering main control loop with PID $$
date +"at %c"

while test $AMBROSABORT -eq 0
do : # main control loop

# poll&process sources with `extractor`
# start&control `assembler`
# start&control `channelchief`

done

echo finished.

