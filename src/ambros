#!/bin/sh
# ambros:
# control script for one channel

if test "$1" = ""
then cat <<EOT
usage: $0 <configfile>

start AMBROS control instance configured by <configfile>
EOT
exit 1
fi

# save directories of scripts and instance (configuration file)
# is somewhat complicated to correctly handle relative paths
# (not using $OLDPWD etc to keep better portability)
owd=`pwd`
cd `dirname $0`
AMBROSDIR=`pwd`
echo AMBROSDIR: $AMBROSDIR
cd "$owd"
cd `dirname $1`
ROOTDIR=`pwd`
echo ROOTDIR: $ROOTDIR

cd $AMBROSDIR || { echo "cannot access scripts in $AMBROSDIR" ; exit 3 ; }
echo :: `pwd`
# read global settings
. ./constants.sh
# (re)generate morse code table
cd morse && ./chargen.sh

if test ! -d "$ROOTDIR" -o ! -x "$ROOTDIR" -o ! -r "$ROOTDIR" -o ! -w "$ROOTDIR"
then echo "$ROOTDIR is not read/write/executable directory, aborting!"
exit 2
fi

# get channel list
cd "$ROOTDIR"
channels=`configread $1 channels`
echo channels: $channels

echo working in channel $ROOTDIR
speed=`configread $CHANNELCONFIG WPM`
speed=${speed:-12}
echo at speed $speed Words/min

# handler for aborting
finish () {
 echo "received abort signal, stopping all subprocesses"
# if no PID is set, use 1 (init) as a dummy argument
 /bin/kill -TERM ${pidassembler:-1} $pidchannelchief
 echo ending main control loop
 date +"at %c"
 AMBROSABORT=1
}
AMBROSABORT=0
 
trap finish INT TERM STOP

echo entering main control loop with PID $$ at
date +"at %c"

while test $AMBROSABORT -eq 0
do : # main control loop

# poll&process sources with `extractor`
# start&control `assembler`
# start&control `channelchief`

done

echo finished.

